"""
dashboard.py - Dashboard para visualiza√ß√£o de m√©tricas e drift do modelo

Este script cria um dashboard interativo usando Streamlit para visualizar as m√©tricas
e o drift do modelo de scoring da Decision.
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
import requests
import datetime
import time
from pathlib import Path
import os
import sys

# Adicionar diret√≥rio raiz do projeto ao path para importar m√≥dulos locais
# Determinar o caminho do projeto raiz (dois diret√≥rios acima do arquivo atual)
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
sys.path.insert(0, project_root)

from src.monitoring.metrics_store import (
    get_metrics_history,
    get_recent_predictions,
    METRICS_FILE
)
from src.monitoring.drift_detector import (
    get_latest_drift_report,
    visualize_feature_drift,
    DRIFT_REPORTS_DIR
)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de Monitoramento - Decision Scoring",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Inicializar vari√°veis de sess√£o
if 'last_refresh' not in st.session_state:
    st.session_state.last_refresh = datetime.datetime.now()

# Fun√ß√£o para formatar timestamp
def format_timestamp(timestamp_str):
    try:
        dt = datetime.datetime.fromisoformat(timestamp_str)
        return dt.strftime("%d/%m/%Y %H:%M:%S")
    except:
        return timestamp_str

# Barra lateral com informa√ß√µes
with st.sidebar:
    st.title("Decision Scoring")
    st.subheader("Monitoramento do Modelo")
    
    st.markdown("---")
    
    # Bot√£o de atualizar
    if st.button("üîÑ Atualizar Dados"):
        st.session_state.last_refresh = datetime.datetime.now()
        st.success("Dados atualizados!")
    
    st.markdown(f"√öltima atualiza√ß√£o: {st.session_state.last_refresh.strftime('%H:%M:%S')}")
    
    st.markdown("---")
    
    # Op√ß√µes de navega√ß√£o
    page = st.radio(
        "Navega√ß√£o",
        ["Dashboard Principal", "An√°lise de Drift", "Hist√≥rico de M√©tricas", "Predi√ß√µes Recentes"]
    )
    
    st.markdown("---")
    
    # Informa√ß√µes do projeto
    st.markdown("**Informa√ß√µes do Projeto**")
    st.markdown("Sistema de Monitoramento para o modelo de scoring da Decision.")
    st.markdown("Vers√£o: 1.0.0")

# Fun√ß√£o para carregar m√©tricas
@st.cache_data(ttl=60)  # Cache por 60 segundos
def load_metrics_data():
    try:
        metrics_data = get_metrics_history()
        return metrics_data
    except Exception as e:
        st.error(f"Erro ao carregar m√©tricas: {str(e)}")
        return {"model_info": {}, "metrics_history": []}

# Fun√ß√£o para carregar predi√ß√µes recentes
@st.cache_data(ttl=60)  # Cache por 60 segundos
def load_recent_predictions(days=30):
    try:
        predictions_df = get_recent_predictions(days=days)
        return predictions_df
    except Exception as e:
        st.error(f"Erro ao carregar predi√ß√µes: {str(e)}")
        return pd.DataFrame()

# Fun√ß√£o para carregar relat√≥rio de drift
@st.cache_data(ttl=60)  # Cache por 60 segundos
def load_drift_report():
    try:
        drift_report = get_latest_drift_report()
        return drift_report
    except Exception as e:
        st.error(f"Erro ao carregar relat√≥rio de drift: {str(e)}")
        return {"timestamp": "", "drift_detected": False, "drift_score": 0.0}

# Dashboard Principal
def show_main_dashboard():
    st.title("Dashboard Principal")
    
    # Carregar dados
    metrics_data = load_metrics_data()
    predictions_df = load_recent_predictions(days=30)
    drift_report = load_drift_report()
    
    # Verificar se h√° dados suficientes
    if not metrics_data["metrics_history"]:
        st.warning("N√£o h√° dados de m√©tricas dispon√≠veis.")
        return
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    # M√©tricas mais recentes
    latest_metrics = metrics_data["metrics_history"][-1]["metrics"]
    
    with col1:
        st.metric(
            label="Acur√°cia do Modelo", 
            value=f"{latest_metrics.get('accuracy', 0.0) * 100:.1f}%"
        )
    
    with col2:
        st.metric(
            label="Precis√£o", 
            value=f"{latest_metrics.get('precision', 0.0) * 100:.1f}%"
        )
    
    with col3:
        st.metric(
            label="Recall", 
            value=f"{latest_metrics.get('recall', 0.0) * 100:.1f}%"
        )
    
    with col4:
        st.metric(
            label="F1-Score", 
            value=f"{latest_metrics.get('f1_score', 0.0) * 100:.1f}%"
        )
    
    # Status do Drift
    drift_score = drift_report.get("drift_score", 0.0)
    drift_detected = drift_report.get("drift_detected", False)
    
    st.markdown("---")
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.subheader("Status do Drift")
        
        if drift_detected:
            st.error("‚ö†Ô∏è Drift Detectado!")
            st.markdown(f"**Score de Drift:** {drift_score * 100:.1f}%")
            st.markdown(f"**Features afetadas:** {len(drift_report.get('features_with_drift', []))}")
            st.markdown(f"**√öltima verifica√ß√£o:** {format_timestamp(drift_report.get('timestamp', ''))}")
        else:
            st.success("‚úÖ Modelo Est√°vel")
            st.markdown(f"**Score de Drift:** {drift_score * 100:.1f}%")
            st.markdown(f"**√öltima verifica√ß√£o:** {format_timestamp(drift_report.get('timestamp', ''))}")
    
    with col2:
        # Evolu√ß√£o das m√©tricas
        if len(metrics_data["metrics_history"]) > 1:
            st.subheader("Evolu√ß√£o das M√©tricas")
            
            # Preparar dados para o gr√°fico
            dates = []
            accuracies = []
            precisions = []
            recalls = []
            f1_scores = []
            
            for entry in metrics_data["metrics_history"]:
                try:
                    dates.append(datetime.datetime.fromisoformat(entry["timestamp"]))
                    metrics = entry["metrics"]
                    accuracies.append(metrics.get("accuracy", None))
                    precisions.append(metrics.get("precision", None))
                    recalls.append(metrics.get("recall", None))
                    f1_scores.append(metrics.get("f1_score", None))
                except:
                    continue
            
            # Criar DataFrame para o gr√°fico
            metrics_df = pd.DataFrame({
                "Data": dates,
                "Acur√°cia": accuracies,
                "Precis√£o": precisions,
                "Recall": recalls,
                "F1-Score": f1_scores
            })
            
            # Plotar gr√°fico
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(metrics_df["Data"], metrics_df["Acur√°cia"], marker='o', label="Acur√°cia")
            ax.plot(metrics_df["Data"], metrics_df["Precis√£o"], marker='s', label="Precis√£o")
            ax.plot(metrics_df["Data"], metrics_df["Recall"], marker='^', label="Recall")
            ax.plot(metrics_df["Data"], metrics_df["F1-Score"], marker='*', label="F1-Score")
            
            ax.set_ylabel("Valor")
            ax.set_xlabel("Data")
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            # Exibir gr√°fico
            st.pyplot(fig)
        else:
            st.info("N√£o h√° dados hist√≥ricos suficientes para exibir evolu√ß√£o das m√©tricas.")
    
    st.markdown("---")
    
    # Estat√≠sticas de predi√ß√µes recentes
    st.subheader("Predi√ß√µes Recentes")
    
    if len(predictions_df) > 0:
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribui√ß√£o de predi√ß√µes (positivas vs negativas)
            fig, ax = plt.subplots(figsize=(8, 6))
            predictions_dist = predictions_df['prediction'].value_counts().to_dict()
            labels = ['Aprovado' if k == 1 else 'Reprovado' for k in predictions_dist.keys()]
            sizes = list(predictions_dist.values())
            
            ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
            ax.axis('equal')
            st.pyplot(fig)
            
        with col2:
            # Estat√≠sticas por segmento
            if 'segment' in predictions_df.columns:
                segment_stats = predictions_df.groupby('segment')['prediction'].agg(['mean', 'count'])
                segment_stats['mean'] = segment_stats['mean'] * 100  # Converter para percentual
                segment_stats.columns = ['Taxa de Aprova√ß√£o (%)', 'Quantidade']
                segment_stats = segment_stats.sort_values('Quantidade', ascending=False)
                
                st.dataframe(segment_stats.style.format({'Taxa de Aprova√ß√£o (%)': '{:.1f}%'}))
            else:
                st.info("N√£o h√° dados de segmentos dispon√≠veis.")
    else:
        st.info("N√£o h√° dados de predi√ß√µes recentes dispon√≠veis.")

# An√°lise de Drift
def show_drift_analysis():
    st.title("An√°lise de Drift do Modelo")
    
    # Carregar relat√≥rio de drift
    drift_report = load_drift_report()
    
    if not drift_report:
        st.warning("N√£o h√° relat√≥rio de drift dispon√≠vel.")
        return
    
    # Informa√ß√µes gerais
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="Score de Drift", 
            value=f"{drift_report.get('drift_score', 0.0) * 100:.1f}%"
        )
    
    with col2:
        st.metric(
            label="Status", 
            value="Drift Detectado!" if drift_report.get("drift_detected", False) else "Est√°vel"
        )
    
    with col3:
        st.metric(
            label="Features com Drift", 
            value=len(drift_report.get("features_with_drift", []))
        )
    
    st.markdown("---")
    
    # Detalhes do drift
    if drift_report.get("features_with_drift", []):
        st.subheader("Features com Drift Detectado")
        
        # Lista de features com drift
        for feature in drift_report.get("features_with_drift", []):
            feature_details = drift_report.get("feature_details", {}).get(feature, {})
            
            if feature_details:
                with st.expander(f"Feature: {feature}"):
                    col1, col2 = st.columns([1, 3])
                    
                    with col1:
                        st.markdown(f"**Tipo:** {feature_details.get('type', 'N/A')}")
                        
                        # M√©tricas espec√≠ficas por tipo
                        metrics = feature_details.get("metrics", {})
                        if feature_details.get('type') == 'numeric':
                            st.markdown(f"**M√©dia (Treino):** {metrics.get('train_mean', 0.0):.2f}")
                            st.markdown(f"**M√©dia (Atual):** {metrics.get('current_mean', 0.0):.2f}")
                            st.markdown(f"**Diferen√ßa Padronizada:** {metrics.get('standardized_mean_diff', 0.0):.2f}")
                        elif feature_details.get('type') == 'categorical':
                            st.markdown(f"**Diverg√™ncia JS:** {metrics.get('js_divergence', 0.0):.3f}")
                            st.markdown(f"**Categorias (Treino):** {metrics.get('n_categories_train', 0)}")
                            st.markdown(f"**Categorias (Atual):** {metrics.get('n_categories_current', 0)}")
                            
                            if metrics.get('new_categories', []):
                                st.markdown("**Novas Categorias:**")
                                for cat in metrics.get('new_categories', []):
                                    st.markdown(f"- {cat}")
                    
                    with col2:
                        # Visualizar drift da feature
                        try:
                            fig = visualize_feature_drift(feature)
                            st.pyplot(fig)
                        except Exception as e:
                            st.error(f"Erro ao visualizar drift: {str(e)}")
    else:
        st.success("N√£o h√° drift significativo detectado nas features.")
    
    # Informa√ß√µes sobre a an√°lise
    st.markdown("---")
    st.subheader("Informa√ß√µes da An√°lise")
    st.markdown(f"**Data da an√°lise:** {format_timestamp(drift_report.get('timestamp', ''))}")
    st.markdown(f"**Amostras analisadas:** {drift_report.get('n_samples_analyzed', 0)}")
    st.markdown(f"**Features analisadas:** {drift_report.get('features_analyzed', 0)}")

# Hist√≥rico de M√©tricas
def show_metrics_history():
    st.title("Hist√≥rico de M√©tricas do Modelo")
    
    # Carregar dados
    metrics_data = load_metrics_data()
    
    if not metrics_data["metrics_history"]:
        st.warning("N√£o h√° dados de m√©tricas dispon√≠veis.")
        return
    
    # Informa√ß√µes do modelo
    st.subheader("Informa√ß√µes do Modelo")
    model_info = metrics_data.get("model_info", {})
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**Data de cria√ß√£o:** {format_timestamp(model_info.get('creation_date', ''))}")
        st.markdown(f"**Vers√£o do modelo:** {model_info.get('model_version', 'N/A')}")
    
    with col2:
        baseline_metrics = model_info.get('baseline_metrics', {})
        if baseline_metrics:
            st.markdown("**M√©tricas Baseline:**")
            for metric, value in baseline_metrics.items():
                st.markdown(f"- {metric}: {value:.4f}")
    
    st.markdown("---")
    
    # Gr√°fico de evolu√ß√£o das m√©tricas
    st.subheader("Evolu√ß√£o das M√©tricas")
    
    # Preparar dados para o gr√°fico
    metrics_history = metrics_data["metrics_history"]
    
    if len(metrics_history) > 1:
        # Criar DataFrame para an√°lise
        metrics_rows = []
        
        for entry in metrics_history:
            try:
                timestamp = datetime.datetime.fromisoformat(entry["timestamp"])
                metrics = entry["metrics"]
                
                row = {"timestamp": timestamp}
                for metric_name, metric_value in metrics.items():
                    row[metric_name] = metric_value
                
                metrics_rows.append(row)
            except:
                continue
        
        metrics_df = pd.DataFrame(metrics_rows)
        
        # Sele√ß√£o de m√©tricas para exibir
        available_metrics = [col for col in metrics_df.columns if col != 'timestamp']
        selected_metrics = st.multiselect(
            "Selecione as m√©tricas para visualizar",
            available_metrics,
            default=['accuracy', 'precision', 'recall', 'f1_score'][:min(len(available_metrics), 4)]
        )
        
        if selected_metrics:
            # Plotar gr√°fico
            fig, ax = plt.subplots(figsize=(10, 6))
            
            for metric in selected_metrics:
                ax.plot(metrics_df['timestamp'], metrics_df[metric], marker='o', label=metric)
            
            ax.set_ylabel("Valor")
            ax.set_xlabel("Data")
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            # Formatar eixo X para mostrar datas
            plt.xticks(rotation=45)
            
            # Exibir gr√°fico
            st.pyplot(fig)
            
            # Exibir tabela com dados
            st.subheader("Dados Hist√≥ricos")
            
            display_df = metrics_df[['timestamp'] + selected_metrics].copy()
            display_df['timestamp'] = display_df['timestamp'].dt.strftime("%Y-%m-%d %H:%M")
            
            st.dataframe(display_df.sort_values('timestamp', ascending=False))
        else:
            st.info("Selecione pelo menos uma m√©trica para visualizar o gr√°fico.")
    else:
        st.info("N√£o h√° dados hist√≥ricos suficientes para exibir evolu√ß√£o das m√©tricas.")

# Predi√ß√µes Recentes
def show_recent_predictions():
    st.title("An√°lise de Predi√ß√µes Recentes")
    
    # Seletor de per√≠odo
    days = st.slider("Selecione o per√≠odo de an√°lise (dias)", 1, 90, 30)
    
    # Carregar dados
    predictions_df = load_recent_predictions(days=days)
    
    if len(predictions_df) == 0:
        st.warning("N√£o h√° dados de predi√ß√µes dispon√≠veis para o per√≠odo selecionado.")
        return
    
    # M√©tricas gerais
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="Total de Predi√ß√µes", 
            value=len(predictions_df)
        )
    
    with col2:
        approval_rate = (predictions_df['prediction'] == 1).mean() * 100
        st.metric(
            label="Taxa de Aprova√ß√£o", 
            value=f"{approval_rate:.1f}%"
        )
    
    with col3:
        avg_probability = predictions_df['prediction_probability'].mean() * 100
        st.metric(
            label="Probabilidade M√©dia", 
            value=f"{avg_probability:.1f}%"
        )
    
    st.markdown("---")
    
    # An√°lise por segmentos
    if 'segment' in predictions_df.columns:
        st.subheader("An√°lise por Segmento")
        
        col1, col2 = st.columns([2, 3])
        
        with col1:
            # Tabela de estat√≠sticas por segmento
            segment_stats = predictions_df.groupby('segment').agg({
                'prediction': ['count', 'mean'],
                'prediction_probability': 'mean'
            })
            
            segment_stats.columns = ['Quantidade', 'Taxa Aprova√ß√£o', 'Prob. M√©dia']
            segment_stats['Taxa Aprova√ß√£o'] = segment_stats['Taxa Aprova√ß√£o'] * 100
            segment_stats['Prob. M√©dia'] = segment_stats['Prob. M√©dia'] * 100
            segment_stats = segment_stats.sort_values('Quantidade', ascending=False)
            
            st.dataframe(segment_stats.style.format({
                'Taxa Aprova√ß√£o': '{:.1f}%',
                'Prob. M√©dia': '{:.1f}%'
            }))
        
        with col2:
            # Gr√°fico de barras para compara√ß√£o
            fig, ax = plt.subplots(figsize=(10, 6))
            
            segment_plot_df = segment_stats.reset_index()
            sns.barplot(x='segment', y='Taxa Aprova√ß√£o', data=segment_plot_df, ax=ax)
            
            ax.set_title('Taxa de Aprova√ß√£o por Segmento')
            ax.set_ylabel('Taxa de Aprova√ß√£o (%)')
            ax.set_xlabel('Segmento')
            
            plt.xticks(rotation=45)
            
            st.pyplot(fig)
    
    # An√°lise temporal
    st.subheader("An√°lise Temporal")
    
    # Converter timestamp para datetime
    predictions_df['date'] = pd.to_datetime(predictions_df['timestamp']).dt.date
    
    # Agrupar por data
    daily_stats = predictions_df.groupby('date').agg({
        'prediction': ['count', 'mean'],
        'prediction_probability': 'mean'
    })
    
    daily_stats.columns = ['Quantidade', 'Taxa Aprova√ß√£o', 'Prob. M√©dia']
    daily_stats['Taxa Aprova√ß√£o'] = daily_stats['Taxa Aprova√ß√£o'] * 100
    daily_stats['Prob. M√©dia'] = daily_stats['Prob. M√©dia'] * 100
    
    # Plotar gr√°fico
    fig, ax1 = plt.subplots(figsize=(12, 6))
    
    # Eixo para quantidade
    color = 'tab:blue'
    ax1.set_xlabel('Data')
    ax1.set_ylabel('Quantidade de Predi√ß√µes', color=color)
    ax1.bar(daily_stats.index, daily_stats['Quantidade'], color=color, alpha=0.7)
    ax1.tick_params(axis='y', labelcolor=color)
    
    # Eixo secund√°rio para taxa de aprova√ß√£o
    ax2 = ax1.twinx()
    color = 'tab:red'
    ax2.set_ylabel('Taxa de Aprova√ß√£o (%)', color=color)
    ax2.plot(daily_stats.index, daily_stats['Taxa Aprova√ß√£o'], color=color, marker='o')
    ax2.tick_params(axis='y', labelcolor=color)
    
    plt.title('Evolu√ß√£o di√°ria de predi√ß√µes e aprova√ß√µes')
    plt.xticks(rotation=45)
    
    st.pyplot(fig)
    
    # Tabela com dados di√°rios
    st.subheader("Dados Di√°rios")
    st.dataframe(daily_stats.style.format({
        'Taxa Aprova√ß√£o': '{:.1f}%',
        'Prob. M√©dia': '{:.1f}%'
    }))

# Exibir a p√°gina selecionada
if page == "Dashboard Principal":
    show_main_dashboard()
elif page == "An√°lise de Drift":
    show_drift_analysis()
elif page == "Hist√≥rico de M√©tricas":
    show_metrics_history()
elif page == "Predi√ß√µes Recentes":
    show_recent_predictions()

# Footer
st.markdown("---")
st.markdown("Decision Scoring Dashboard ¬© 2025")
st.markdown("Desenvolvido para monitoramento cont√≠nuo de performance e drift do modelo.")